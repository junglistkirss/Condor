namespace Condor.Visitor.Generator
{
    internal static class DefaultTemplates
    {
        internal const string VisitorTemplate = @"// <auto-generated>
{{#*inline ""Response""}}
{{~#if ../IsAsync}}{{~#if ../HasReturnType}}ValueTask<{{{../ReturnType}}}>{{~else~}}ValueTask{{/if~}}{{else}}{{~#if ../HasReturnType}}{{{../ReturnType}}}{{~else~}}void{{/if~}}{{/if~}}
{{/inline}}
{{#*inline ""ResponseNested""}}
{{~#if ../../IsAsync}}{{~#if ../../HasReturnType}}ValueTask<{{{../../ReturnType}}}>{{~else~}}ValueTask{{/if~}}{{else}}{{~#if ../../HasReturnType}}{{{ ../../ReturnType}}}{{~else~}}void{{/if~}}{{/if~}}
{{/inline}}
{{#*inline ""VisitOptionsClass""}}
    {{#each ImplementationGroup}}
        {{#if AddVisitFallBack}}
        public partial {{>Response}} VisitFallBack({{{VisitedType.TypeFullName}}} element{{#each ../TypedArgs}}, {{{ParamTypeFullName}}} {{SanitizedParamName}}{{/each}});
        {{/if}}
        {{#if AddVisitRedirect}}
        public virtual {{>Response}} VisitRedirect({{{VisitedType.TypeFullName}}} element{{#each ../TypedArgs}}, {{{ParamTypeFullName}}} {{SanitizedParamName}}{{/each}})
        {
            switch (element)
            {
                {{#each ImplementationTypes}}
                case {{{ParamTypeFullName}}} x:
                    {{#if ../../HasReturnType}} 
                    return Visit(x{{#each ../../TypedArgs}}, {{SanitizedParamName}}{{/each}});
                    {{else}}
                    {{#if ../IsAsync}}
                    return Visit(x{{#each ../../TypedArgs}}, {{SanitizedParamName}}{{/each}});
                    {{else}}
                    Visit(x{{#each ../../TypedArgs}}, {{SanitizedParamName}}{{/each}});
                    break;
                    {{/if}}
                    {{/if}}
                {{/each}}
                default:
                    {{#if AddVisitFallBack}}
                    return VisitFallBack(element{{#each ../../TypedArgs}}, {{SanitizedParamName}}{{/each}});
                    {{else}}
                    throw new System.NotSupportedException(""Unsupported type"");
                    {{/if}}
            }
        }
        {{/if}}
        {{#each ImplementationTypes}}
        public partial {{>ResponseNested}} Visit({{{TypeFullName}}} element{{#each ../../TypedArgs}}, {{{ParamTypeFullName}}} {{SanitizedParamName}}{{/each}});
        {{/each}}
    {{/each}}
{{/inline}}
{{#*inline ""VisitOptionsInterface""}}
    {{#each ImplementationGroup}}
        {{#if AddVisitFallBack}}
        {{>Response}} VisitFallBack({{{VisitedType.TypeFullName}}} element{{#each ../TypedArgs}}, {{{ParamTypeFullName}}} {{SanitizedParamName}}{{/each}});
        {{/if}}

        {{#if AddVisitRedirect}}
        {{>Response}} VisitRedirect({{{VisitedType.TypeFullName}}} element{{#each ../TypedArgs}}, {{{ParamTypeFullName}}} {{SanitizedParamName}}{{/each}});
        {{/if}}
        {{#each ImplementationTypes}}
        {{>ResponseNested}} Visit({{{TypeFullName}}} element{{#each ../../TypedArgs}}, {{{ParamTypeFullName}}} {{SanitizedParamName}}{{/each}}{{#each ../Args}}, {{{.}}}{{/each}});
        {{/each}}
    {{/each}}
{{/inline}}

namespace {{OutputNamespace}}
{
    {{AccessibilityModifier}} partial {{{KeywordTypeDefinition}}} {{{OriginalTypeDefinition}}}
    {
        {{#if IsInterface}}
        {{>VisitOptionsInterface}}
        {{else}}
        {{>VisitOptionsClass}}
        {{/if}}
    }    
}";
    }
}
